346f1ccfdbdf97e800a4bf24d11ee544335b4c36
diff --git a/src/inspector/inspected-context.cc b/src/inspector/inspected-context.cc
index d7a2f810db..5b6b97185c 100644
--- a/src/inspector/inspected-context.cc
+++ b/src/inspector/inspected-context.cc
@@ -15,6 +15,39 @@
 
 namespace v8_inspector {
 
+class InspectedContext::WeakCallbackData {
+ public:
+  WeakCallbackData(InspectedContext* context, V8InspectorImpl* inspector,
+                   int groupId, int contextId)
+      : m_context(context),
+        m_inspector(inspector),
+        m_groupId(groupId),
+        m_contextId(contextId) {}
+
+  static void resetContext(const v8::WeakCallbackInfo<WeakCallbackData>& data) {
+    // InspectedContext is alive here because weak handler is still alive.
+    data.GetParameter()->m_context->m_weakCallbackData = nullptr;
+    data.GetParameter()->m_context->m_context.Reset();
+    data.SetSecondPassCallback(&callContextCollected);
+  }
+
+  static void callContextCollected(
+      const v8::WeakCallbackInfo<WeakCallbackData>& data) {
+    // InspectedContext can be dead here since anything can happen between first
+    // and second pass callback.
+    WeakCallbackData* callbackData = data.GetParameter();
+    callbackData->m_inspector->contextCollected(callbackData->m_groupId,
+                                                callbackData->m_contextId);
+    delete callbackData;
+  }
+
+ private:
+  InspectedContext* m_context;
+  V8InspectorImpl* m_inspector;
+  int m_groupId;
+  int m_contextId;
+};
+
 InspectedContext::InspectedContext(V8InspectorImpl* inspector,
                                    const V8ContextInfo& info, int contextId)
     : m_inspector(inspector),
@@ -25,6 +58,11 @@ InspectedContext::InspectedContext(V8InspectorImpl* inspector,
       m_humanReadableName(toString16(info.humanReadableName)),
       m_auxData(toString16(info.auxData)) {
   v8::debug::SetContextId(info.context, contextId);
+  m_weakCallbackData =
+      new WeakCallbackData(this, m_inspector, m_contextGroupId, m_contextId);
+  m_context.SetWeak(m_weakCallbackData,
+                    &InspectedContext::WeakCallbackData::resetContext,
+                    v8::WeakCallbackType::kParameter);
   if (!info.hasMemoryOnConsole) return;
   v8::Context::Scope contextScope(info.context);
   v8::Local<v8::Object> global = info.context->Global();
@@ -38,6 +76,9 @@ InspectedContext::InspectedContext(V8InspectorImpl* inspector,
 }
 
 InspectedContext::~InspectedContext() {
+  // If we destory InspectedContext before weak callback is invoked then we need
+  // to delete data here.
+  if (!m_context.IsEmpty()) delete m_weakCallbackData;
 }
 
 // static
diff --git a/src/inspector/inspected-context.h b/src/inspector/inspected-context.h
index b32263bc2e..ac33071f62 100644
--- a/src/inspector/inspected-context.h
+++ b/src/inspector/inspected-context.h
@@ -47,6 +47,8 @@ class InspectedContext {
   friend class V8InspectorImpl;
   InspectedContext(V8InspectorImpl*, const V8ContextInfo&, int contextId);
 
+  class WeakCallbackData;
+
   V8InspectorImpl* m_inspector;
   v8::Global<v8::Context> m_context;
   int m_contextId;
@@ -56,6 +58,7 @@ class InspectedContext {
   const String16 m_auxData;
   std::unordered_set<int> m_reportedSessionIds;
   std::unordered_map<int, std::unique_ptr<InjectedScript>> m_injectedScripts;
+  WeakCallbackData* m_weakCallbackData;
 
   DISALLOW_COPY_AND_ASSIGN(InspectedContext);
 };
diff --git a/src/inspector/v8-inspector-impl.cc b/src/inspector/v8-inspector-impl.cc
index 6b8e7324f5..0a7b19a36a 100644
--- a/src/inspector/v8-inspector-impl.cc
+++ b/src/inspector/v8-inspector-impl.cc
@@ -203,6 +203,10 @@ void V8InspectorImpl::contextCreated(const V8ContextInfo& info) {
 void V8InspectorImpl::contextDestroyed(v8::Local<v8::Context> context) {
   int contextId = InspectedContext::contextId(context);
   int groupId = contextGroupId(context);
+  contextCollected(groupId, contextId);
+}
+
+void V8InspectorImpl::contextCollected(int groupId, int contextId) {
   m_contextIdToGroupIdMap.erase(contextId);
 
   ConsoleStorageMap::iterator storageIt = m_consoleStorageMap.find(groupId);
diff --git a/src/inspector/v8-inspector-impl.h b/src/inspector/v8-inspector-impl.h
index 3effb39f7c..a7666dfd42 100644
--- a/src/inspector/v8-inspector-impl.h
+++ b/src/inspector/v8-inspector-impl.h
@@ -74,6 +74,7 @@ class V8InspectorImpl : public V8Inspector {
                                               const StringView& state) override;
   void contextCreated(const V8ContextInfo&) override;
   void contextDestroyed(v8::Local<v8::Context>) override;
+  void contextCollected(int contextGroupId, int contextId);
   void resetContextGroup(int contextGroupId) override;
   void idleStarted() override;
   void idleFinished() override;
diff --git a/test/inspector/runtime/context-destroyed-on-context-collected-expected.txt b/test/inspector/runtime/context-destroyed-on-context-collected-expected.txt
new file mode 100644
index 0000000000..9a5e1708c1
--- /dev/null
+++ b/test/inspector/runtime/context-destroyed-on-context-collected-expected.txt
@@ -0,0 +1,7 @@
+Tests that contextDesrtoyed nofitication is fired when context is collected.
+{
+    method : Runtime.executionContextDestroyed
+    params : {
+        executionContextId : <executionContextId>
+    }
+}
diff --git a/test/inspector/runtime/context-destroyed-on-context-collected.js b/test/inspector/runtime/context-destroyed-on-context-collected.js
new file mode 100644
index 0000000000..9f715937c6
--- /dev/null
+++ b/test/inspector/runtime/context-destroyed-on-context-collected.js
@@ -0,0 +1,14 @@
+// Copyright 2017 the V8 project authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+let {session, contextGroup, Protocol} =
+  InspectorTest.start('Tests that contextDesrtoyed nofitication is fired when context is collected.');
+
+(async function test() {
+  await Protocol.Runtime.enable();
+  Protocol.Runtime.onExecutionContextDestroyed(InspectorTest.logMessage);
+  contextGroup.addScript('inspector.freeContext()');
+  await Protocol.HeapProfiler.collectGarbage();
+  InspectorTest.completeTest();
+})();
